/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IDIDStorage {
  export type StoredDataStruct = {
    dataHash: BytesLike;
    dataType: string;
    timestamp: BigNumberish;
    isEncrypted: boolean;
    authorizedAccessors: AddressLike[];
  };

  export type StoredDataStructOutput = [
    dataHash: string,
    dataType: string,
    timestamp: bigint,
    isEncrypted: boolean,
    authorizedAccessors: string[]
  ] & {
    dataHash: string;
    dataType: string;
    timestamp: bigint;
    isEncrypted: boolean;
    authorizedAccessors: string[];
  };
}

export interface DIDStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dataExists"
      | "deleteData"
      | "didRegistry"
      | "getAllDataTypes"
      | "getData"
      | "getDataHash"
      | "grantAccess"
      | "hasAccess"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "revokeAccess"
      | "storeData"
      | "transferOwnership"
      | "unpause"
      | "updateData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "DataDeleted"
      | "DataStored"
      | "DataUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "StorageInitialized"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "dataExists",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteData",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "didRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDataTypes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getData",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataHash",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [BytesLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [BytesLike, AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [BytesLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "storeData",
    values: [BytesLike, string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateData",
    values: [BytesLike, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "dataExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "didRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDataTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storeData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateData", data: BytesLike): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [
    didHash: BytesLike,
    accessor: AddressLike,
    dataType: string
  ];
  export type OutputTuple = [
    didHash: string,
    accessor: string,
    dataType: string
  ];
  export interface OutputObject {
    didHash: string;
    accessor: string;
    dataType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [
    didHash: BytesLike,
    accessor: AddressLike,
    dataType: string
  ];
  export type OutputTuple = [
    didHash: string,
    accessor: string,
    dataType: string
  ];
  export interface OutputObject {
    didHash: string;
    accessor: string;
    dataType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataDeletedEvent {
  export type InputTuple = [didHash: BytesLike, dataType: string];
  export type OutputTuple = [didHash: string, dataType: string];
  export interface OutputObject {
    didHash: string;
    dataType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataStoredEvent {
  export type InputTuple = [
    didHash: BytesLike,
    dataType: string,
    dataHash: BytesLike
  ];
  export type OutputTuple = [
    didHash: string,
    dataType: string,
    dataHash: string
  ];
  export interface OutputObject {
    didHash: string;
    dataType: string;
    dataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataUpdatedEvent {
  export type InputTuple = [
    didHash: BytesLike,
    dataType: string,
    newDataHash: BytesLike
  ];
  export type OutputTuple = [
    didHash: string,
    dataType: string,
    newDataHash: string
  ];
  export interface OutputObject {
    didHash: string;
    dataType: string;
    newDataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StorageInitializedEvent {
  export type InputTuple = [didRegistry: AddressLike];
  export type OutputTuple = [didRegistry: string];
  export interface OutputObject {
    didRegistry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DIDStorage extends BaseContract {
  connect(runner?: ContractRunner | null): DIDStorage;
  waitForDeployment(): Promise<this>;

  interface: DIDStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dataExists: TypedContractMethod<
    [didHash: BytesLike, dataType: string],
    [boolean],
    "view"
  >;

  deleteData: TypedContractMethod<
    [didHash: BytesLike, dataType: string],
    [void],
    "nonpayable"
  >;

  didRegistry: TypedContractMethod<[], [string], "view">;

  getAllDataTypes: TypedContractMethod<
    [didHash: BytesLike],
    [string[]],
    "view"
  >;

  getData: TypedContractMethod<
    [didHash: BytesLike, dataType: string],
    [IDIDStorage.StoredDataStructOutput],
    "view"
  >;

  getDataHash: TypedContractMethod<
    [didHash: BytesLike, dataType: string],
    [string],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [didHash: BytesLike, accessor: AddressLike, dataType: string],
    [void],
    "nonpayable"
  >;

  hasAccess: TypedContractMethod<
    [didHash: BytesLike, accessor: AddressLike, dataType: string],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeAccess: TypedContractMethod<
    [didHash: BytesLike, accessor: AddressLike, dataType: string],
    [void],
    "nonpayable"
  >;

  storeData: TypedContractMethod<
    [
      didHash: BytesLike,
      dataType: string,
      dataHash: BytesLike,
      isEncrypted: boolean
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateData: TypedContractMethod<
    [didHash: BytesLike, dataType: string, newDataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dataExists"
  ): TypedContractMethod<
    [didHash: BytesLike, dataType: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "deleteData"
  ): TypedContractMethod<
    [didHash: BytesLike, dataType: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "didRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllDataTypes"
  ): TypedContractMethod<[didHash: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getData"
  ): TypedContractMethod<
    [didHash: BytesLike, dataType: string],
    [IDIDStorage.StoredDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataHash"
  ): TypedContractMethod<
    [didHash: BytesLike, dataType: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<
    [didHash: BytesLike, accessor: AddressLike, dataType: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [didHash: BytesLike, accessor: AddressLike, dataType: string],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [didHash: BytesLike, accessor: AddressLike, dataType: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storeData"
  ): TypedContractMethod<
    [
      didHash: BytesLike,
      dataType: string,
      dataHash: BytesLike,
      isEncrypted: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateData"
  ): TypedContractMethod<
    [didHash: BytesLike, dataType: string, newDataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "DataDeleted"
  ): TypedContractEvent<
    DataDeletedEvent.InputTuple,
    DataDeletedEvent.OutputTuple,
    DataDeletedEvent.OutputObject
  >;
  getEvent(
    key: "DataStored"
  ): TypedContractEvent<
    DataStoredEvent.InputTuple,
    DataStoredEvent.OutputTuple,
    DataStoredEvent.OutputObject
  >;
  getEvent(
    key: "DataUpdated"
  ): TypedContractEvent<
    DataUpdatedEvent.InputTuple,
    DataUpdatedEvent.OutputTuple,
    DataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "StorageInitialized"
  ): TypedContractEvent<
    StorageInitializedEvent.InputTuple,
    StorageInitializedEvent.OutputTuple,
    StorageInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(bytes32,address,string)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(bytes32,address,string)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "DataDeleted(bytes32,string)": TypedContractEvent<
      DataDeletedEvent.InputTuple,
      DataDeletedEvent.OutputTuple,
      DataDeletedEvent.OutputObject
    >;
    DataDeleted: TypedContractEvent<
      DataDeletedEvent.InputTuple,
      DataDeletedEvent.OutputTuple,
      DataDeletedEvent.OutputObject
    >;

    "DataStored(bytes32,string,bytes32)": TypedContractEvent<
      DataStoredEvent.InputTuple,
      DataStoredEvent.OutputTuple,
      DataStoredEvent.OutputObject
    >;
    DataStored: TypedContractEvent<
      DataStoredEvent.InputTuple,
      DataStoredEvent.OutputTuple,
      DataStoredEvent.OutputObject
    >;

    "DataUpdated(bytes32,string,bytes32)": TypedContractEvent<
      DataUpdatedEvent.InputTuple,
      DataUpdatedEvent.OutputTuple,
      DataUpdatedEvent.OutputObject
    >;
    DataUpdated: TypedContractEvent<
      DataUpdatedEvent.InputTuple,
      DataUpdatedEvent.OutputTuple,
      DataUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "StorageInitialized(address)": TypedContractEvent<
      StorageInitializedEvent.InputTuple,
      StorageInitializedEvent.OutputTuple,
      StorageInitializedEvent.OutputObject
    >;
    StorageInitialized: TypedContractEvent<
      StorageInitializedEvent.InputTuple,
      StorageInitializedEvent.OutputTuple,
      StorageInitializedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
