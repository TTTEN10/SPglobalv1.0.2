/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDIDStorage,
  IDIDStorageInterface,
} from "../../../contracts/interfaces/IDIDStorage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accessor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "dataType",
        type: "string",
      },
    ],
    name: "AccessGranted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accessor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "dataType",
        type: "string",
      },
    ],
    name: "AccessRevoked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "string",
        name: "dataType",
        type: "string",
      },
    ],
    name: "DataDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "string",
        name: "dataType",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
    ],
    name: "DataStored",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "string",
        name: "dataType",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "newDataHash",
        type: "bytes32",
      },
    ],
    name: "DataUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "dataType",
        type: "string",
      },
    ],
    name: "deleteData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
    ],
    name: "getAllDataTypes",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "dataType",
        type: "string",
      },
    ],
    name: "getData",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "dataHash",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "dataType",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isEncrypted",
            type: "bool",
          },
          {
            internalType: "address[]",
            name: "authorizedAccessors",
            type: "address[]",
          },
        ],
        internalType: "struct IDIDStorage.StoredData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "accessor",
        type: "address",
      },
      {
        internalType: "string",
        name: "dataType",
        type: "string",
      },
    ],
    name: "grantAccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "accessor",
        type: "address",
      },
      {
        internalType: "string",
        name: "dataType",
        type: "string",
      },
    ],
    name: "hasAccess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "accessor",
        type: "address",
      },
      {
        internalType: "string",
        name: "dataType",
        type: "string",
      },
    ],
    name: "revokeAccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "dataType",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "dataHash",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "isEncrypted",
        type: "bool",
      },
    ],
    name: "storeData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "didHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "dataType",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "newDataHash",
        type: "bytes32",
      },
    ],
    name: "updateData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDIDStorage__factory {
  static readonly abi = _abi;
  static createInterface(): IDIDStorageInterface {
    return new Interface(_abi) as IDIDStorageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IDIDStorage {
    return new Contract(address, _abi, runner) as unknown as IDIDStorage;
  }
}
