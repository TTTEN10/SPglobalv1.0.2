/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDIDRegistry {
  export type DIDDocumentStruct = {
    did: string;
    owner: AddressLike;
    document: string;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    isActive: boolean;
    controllers: AddressLike[];
  };

  export type DIDDocumentStructOutput = [
    did: string,
    owner: string,
    document: string,
    createdAt: bigint,
    updatedAt: bigint,
    isActive: boolean,
    controllers: string[]
  ] & {
    did: string;
    owner: string;
    document: string;
    createdAt: bigint;
    updatedAt: bigint;
    isActive: boolean;
    controllers: string[];
  };
}

export interface IDIDRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addController"
      | "createDID"
      | "getDID"
      | "getDIDByAddress"
      | "hasControllerAccess"
      | "isDIDActive"
      | "removeController"
      | "revokeDID"
      | "transferDID"
      | "updateDID"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ControllerAdded"
      | "ControllerRemoved"
      | "DIDCreated"
      | "DIDRevoked"
      | "DIDTransferred"
      | "DIDUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addController",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDID",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getDID", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getDIDByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasControllerAccess",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDIDActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeController",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDID",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDID",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createDID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDIDByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasControllerAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDIDActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeDID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateDID", data: BytesLike): Result;
}

export namespace ControllerAddedEvent {
  export type InputTuple = [didHash: BytesLike, controller: AddressLike];
  export type OutputTuple = [didHash: string, controller: string];
  export interface OutputObject {
    didHash: string;
    controller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerRemovedEvent {
  export type InputTuple = [didHash: BytesLike, controller: AddressLike];
  export type OutputTuple = [didHash: string, controller: string];
  export interface OutputObject {
    didHash: string;
    controller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDCreatedEvent {
  export type InputTuple = [
    didHash: BytesLike,
    owner: AddressLike,
    did: string
  ];
  export type OutputTuple = [didHash: string, owner: string, did: string];
  export interface OutputObject {
    didHash: string;
    owner: string;
    did: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDRevokedEvent {
  export type InputTuple = [didHash: BytesLike];
  export type OutputTuple = [didHash: string];
  export interface OutputObject {
    didHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDTransferredEvent {
  export type InputTuple = [didHash: BytesLike, newOwner: AddressLike];
  export type OutputTuple = [didHash: string, newOwner: string];
  export interface OutputObject {
    didHash: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DIDUpdatedEvent {
  export type InputTuple = [didHash: BytesLike, newDocument: string];
  export type OutputTuple = [didHash: string, newDocument: string];
  export interface OutputObject {
    didHash: string;
    newDocument: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDIDRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IDIDRegistry;
  waitForDeployment(): Promise<this>;

  interface: IDIDRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addController: TypedContractMethod<
    [didHash: BytesLike, controller: AddressLike],
    [void],
    "nonpayable"
  >;

  createDID: TypedContractMethod<
    [did: string, document: string],
    [string],
    "nonpayable"
  >;

  getDID: TypedContractMethod<
    [didHash: BytesLike],
    [IDIDRegistry.DIDDocumentStructOutput],
    "view"
  >;

  getDIDByAddress: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  hasControllerAccess: TypedContractMethod<
    [didHash: BytesLike, controller: AddressLike],
    [boolean],
    "view"
  >;

  isDIDActive: TypedContractMethod<[didHash: BytesLike], [boolean], "view">;

  removeController: TypedContractMethod<
    [didHash: BytesLike, controller: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeDID: TypedContractMethod<[didHash: BytesLike], [void], "nonpayable">;

  transferDID: TypedContractMethod<
    [didHash: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDID: TypedContractMethod<
    [didHash: BytesLike, newDocument: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addController"
  ): TypedContractMethod<
    [didHash: BytesLike, controller: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDID"
  ): TypedContractMethod<
    [did: string, document: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDID"
  ): TypedContractMethod<
    [didHash: BytesLike],
    [IDIDRegistry.DIDDocumentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDIDByAddress"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasControllerAccess"
  ): TypedContractMethod<
    [didHash: BytesLike, controller: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDIDActive"
  ): TypedContractMethod<[didHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeController"
  ): TypedContractMethod<
    [didHash: BytesLike, controller: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeDID"
  ): TypedContractMethod<[didHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferDID"
  ): TypedContractMethod<
    [didHash: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDID"
  ): TypedContractMethod<
    [didHash: BytesLike, newDocument: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ControllerAdded"
  ): TypedContractEvent<
    ControllerAddedEvent.InputTuple,
    ControllerAddedEvent.OutputTuple,
    ControllerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ControllerRemoved"
  ): TypedContractEvent<
    ControllerRemovedEvent.InputTuple,
    ControllerRemovedEvent.OutputTuple,
    ControllerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DIDCreated"
  ): TypedContractEvent<
    DIDCreatedEvent.InputTuple,
    DIDCreatedEvent.OutputTuple,
    DIDCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DIDRevoked"
  ): TypedContractEvent<
    DIDRevokedEvent.InputTuple,
    DIDRevokedEvent.OutputTuple,
    DIDRevokedEvent.OutputObject
  >;
  getEvent(
    key: "DIDTransferred"
  ): TypedContractEvent<
    DIDTransferredEvent.InputTuple,
    DIDTransferredEvent.OutputTuple,
    DIDTransferredEvent.OutputObject
  >;
  getEvent(
    key: "DIDUpdated"
  ): TypedContractEvent<
    DIDUpdatedEvent.InputTuple,
    DIDUpdatedEvent.OutputTuple,
    DIDUpdatedEvent.OutputObject
  >;

  filters: {
    "ControllerAdded(bytes32,address)": TypedContractEvent<
      ControllerAddedEvent.InputTuple,
      ControllerAddedEvent.OutputTuple,
      ControllerAddedEvent.OutputObject
    >;
    ControllerAdded: TypedContractEvent<
      ControllerAddedEvent.InputTuple,
      ControllerAddedEvent.OutputTuple,
      ControllerAddedEvent.OutputObject
    >;

    "ControllerRemoved(bytes32,address)": TypedContractEvent<
      ControllerRemovedEvent.InputTuple,
      ControllerRemovedEvent.OutputTuple,
      ControllerRemovedEvent.OutputObject
    >;
    ControllerRemoved: TypedContractEvent<
      ControllerRemovedEvent.InputTuple,
      ControllerRemovedEvent.OutputTuple,
      ControllerRemovedEvent.OutputObject
    >;

    "DIDCreated(bytes32,address,string)": TypedContractEvent<
      DIDCreatedEvent.InputTuple,
      DIDCreatedEvent.OutputTuple,
      DIDCreatedEvent.OutputObject
    >;
    DIDCreated: TypedContractEvent<
      DIDCreatedEvent.InputTuple,
      DIDCreatedEvent.OutputTuple,
      DIDCreatedEvent.OutputObject
    >;

    "DIDRevoked(bytes32)": TypedContractEvent<
      DIDRevokedEvent.InputTuple,
      DIDRevokedEvent.OutputTuple,
      DIDRevokedEvent.OutputObject
    >;
    DIDRevoked: TypedContractEvent<
      DIDRevokedEvent.InputTuple,
      DIDRevokedEvent.OutputTuple,
      DIDRevokedEvent.OutputObject
    >;

    "DIDTransferred(bytes32,address)": TypedContractEvent<
      DIDTransferredEvent.InputTuple,
      DIDTransferredEvent.OutputTuple,
      DIDTransferredEvent.OutputObject
    >;
    DIDTransferred: TypedContractEvent<
      DIDTransferredEvent.InputTuple,
      DIDTransferredEvent.OutputTuple,
      DIDTransferredEvent.OutputObject
    >;

    "DIDUpdated(bytes32,string)": TypedContractEvent<
      DIDUpdatedEvent.InputTuple,
      DIDUpdatedEvent.OutputTuple,
      DIDUpdatedEvent.OutputObject
    >;
    DIDUpdated: TypedContractEvent<
      DIDUpdatedEvent.InputTuple,
      DIDUpdatedEvent.OutputTuple,
      DIDUpdatedEvent.OutputObject
    >;
  };
}
